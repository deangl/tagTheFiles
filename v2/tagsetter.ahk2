; 标签设置器 - 用于为文件添加或编辑标签和描述信息
; 功能：
;   1. 通过命令行参数接收要编辑的文件路径
;   2. 自动查找最近的 filetag.tag 文件
;   3. 显示和编辑文件的标签及描述信息
;   4. 保存修改到对应的 tag 文件中
; 
; 使用方式：
;   通过命令行调用，传入文件路径作为参数
;   例如：AutoHotkey64.exe tagsetter.ahk2 "C:\path\to\file.txt"
; 
; 工作流程：
;   1. 从命令行参数获取文件路径
;   2. 向上级目录查找最近的 filetag.tag 文件
;   3. 读取 tag 文件内容
;   4. 显示当前文件的标签和描述信息（如果存在）
;   5. 允许用户编辑并保存修改
; 
; 注意事项：
;   - 标签文件使用相对路径来标识文件
;   - 修改会立即保存到对应的 tag 文件中
;   - 支持多级目录结构中的文件标签管理

#SingleInstance Off
#Include .\toolFunc.ahk2
#Include .\tagfileops.ahk2

global filePath
global allTags
allTags := Map()
global setterWindow

filePath := A_Args[1]

tagFile := findTagFile(filePath)

if tagFile {
	global allTags
	global setterWindow
	global showFileName
	global chosenTag
	global chosenDesc
	global tagFile
	
	allTags := readTagFile(tagFile)
	; Get the directory containing the tag file to use as the base for relative path
	tagDir := SubStr(tagFile, 1, InStr(tagFile, "\", , -1))
	; Create a dummy file path in the tag directory to use with PathRelativePathTo
	dummyFrom := tagDir . "dummy.txt"
	relativePath := PathRelativePathTo(dummyFrom, filePath)
	tag := allTags.has(relativePath)? allTags[relativePath]["tag"]:""
	desc :=allTags.has(relativePath)? allTags[relativePath]["desc"]:""
	setterWindow := Gui()
	setterWindow.add("Text", "y10 x10 r1", "文件：")
	showFileName :=	setterWindow.add("Text", "y10 x+20 r1 w200", relativePath)
	setterWindow.add("Text", "y+10 x10 r1", "Tags:")
	chosenTag := setterWindow.add("Edit", "y+5 x10 r5 w300", tag)
	setterWindow.add("Text", "y+20 x10 r1", "说明：")
	chosenDesc := setterWindow.add("Edit", "y+5 x10 r25 w300", desc)
	saveButton := setterWindow.add("Button", "y+5 +default", "保存")
	saveButton.OnEvent("Click", Save)
	setterWindow.add("Text", "y+5 x10", "tag文件位置：")
	setterWindow.add("Text", "x+10", tagFile)
	setterWindow.OnEvent("Close", setterWindowClose)
	setterWindow.OnEvent("Escape", setterWindowClose)
	setterWindow.Show()
	return
}else{
	msgbox("找不到 filetag.tag")
	exitapp
	return
}

setterWindowClose(*){
	ExitApp
	return
}


Save(*){
	global allTags
	global showFileName
	global chosenTag
	global chosenDesc
	global tagFile
	
	thepath := showFileName.Text
	tag := chosenTag.Value
	desc := chosenDesc.Value
	fileInfo := Map()
	fileInfo['tag'] := tag
	fileInfo['desc'] := desc
	allTags[thepath] := fileInfo
	writeTagFile(tagFile, allTags)
	ExitApp
	return
}

findTagFile(filePath){
	pathArr := strsplit(filePath, "\")
	N := pathArr.Length

	loop N
	{
		w := joinPath(pathArr, N-A_index) . "filetag.tag"
		if FileExist(w){
			return w
		}
	}
	return 0
}

joinPath(pathArr, N){
	r := ""
	loop N
	{
		r := r . pathArr[A_index] . "\"
	}
	return r
}

